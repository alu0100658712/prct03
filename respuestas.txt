Practica 3 - LPP
Respuestas. 
Nombre: Adriana Rolo Inchausti
Grupo :mañana - L4
 
18: La salida es =>nil

21: diferencias
irb(main):002:0> "\t\n"
=> "\t\n"
irb(main):003:0> '\t\n'
=> "\\t\\n"

22: %q -> comillas simples

23: %Q -> comillas dobles

24:valor de C
--4--
--2--
=> nil>> 

25: Valor de C
--#{a}--
--#{b}--
=> nil

26: valor de a
irb(main):024:0> a ="hello"
=> "hello"
irb(main):025:0> puts a[0,2]
he
=> nil
irb(main):026:0> puts a[-1,1]
o
=> nil
irb(main):027:0> puts a[0,10]
hello
=> nil

27:
irb(main):048:0> g= "hello"
=> "hello"
irb(main):049:0> g << " world"
=> "hello world"

28:
irb(main):057:0> e = '.'*3
=> "..."

29:
irb(main):060:0> "#{a=a+1}"*3
=> "222"

30: 
Separa la frase como un array de caracteres.

irb(main):061:0> %w[this is a test]
=> ["this", "is", "a", "test"]

31:
irb(main):062:0> %w[\t\n]
=> ["\\t\\n"]

32:irb(main):063:0> %W[\t\n]
=> ["\t\n"]

33:irb(main):065:0> nils=Array.new(3)
=> [nil, nil, nil]

34:irb(main):066:0> zeros=Array.new(3,0)
=> [0, 0, 0]

35:irb(main):068:0> b=Array.new(x)
=> [[1, 2], [3, 4]]
irb(main):069:0> puts b
1
2
3
4
=> nil

36:
irb(main):070:0> c=Array.new(3) {|i| 2*i}
=> [0, 2, 4]

37:
irb(main):073:0> a=('a'..'e').to_a
=> ["a", "b", "c", "d", "e"]
irb(main):074:0> a[1,1]
=> ["b"]
irb(main):075:0> a[-2,2]
=> ["d", "e"]
irb(main):076:0> a[0..2]
=> ["a", "b", "c"]
irb(main):077:0> a[0...1]
=> ["a"]
irb(main):078:0> a[-2..-1]
=> ["d", "e"]

38: 
irb(main):007:0> a
=> ["a", "b", "c", "d", "e"]
irb(main):008:0> a[0,2]=%w{A B}
=> ["A", "B"]
irb(main):009:0> a
=> ["A", "B", "c", "d", "e"]
irb(main):010:0> a[2..5]=%w{C D E}
=> ["C", "D", "E"]
irb(main):011:0> a
=> ["A", "B", "C", "D", "E"]
irb(main):012:0> a[0,2]=[]
=> []
irb(main):013:0> a
=> ["C", "D", "E"]
irb(main):014:0> a[-1,1]=['Z']
=> ["Z"]
irb(main):015:0> a
=> ["C", "D", "Z"]
irb(main):016:0> a[-2,2] = nil
=> nil
irb(main):017:0> a
=> ["C", nil]


39:
irb(main):018:0> a=(1...4).to_a
=> [1, 2, 3]
irb(main):019:0> a=a+[4,5]
=> [1, 2, 3, 4, 5]
irb(main):020:0> a+=[[6,7,8]]
=> [1, 2, 3, 4, 5, [6, 7, 8]]
irb(main):021:0> a= a +9
TypeError: can't convert Fixnum into Array
	from (irb):21:in `+'
	from (irb):21
	from /usr/bin/irb:12:in `<main>'
irb(main):022:0> a= a + 9

40:
irb(main):023:0>  x = %w{a b c b a}
=> ["a", "b", "c", "b", "a"]
irb(main):024:0>  x = x - %w{b c d}
=> ["a", "a"]

41:
irb(main):025:0> z = [0]*8
=> [0, 0, 0, 0, 0, 0, 0, 0]

42:
irb(main):026:0> a= []
=> []
irb(main):027:0> a<<1
=> [1]
irb(main):028:0> a<<2<<3
=> [1, 2, 3]
irb(main):029:0> a<<[4,5,6]
=> [1, 2, 3, [4, 5, 6]]
irb(main):030:0> a.concat [7,8]
=> [1, 2, 3, [4, 5, 6], 7, 8]

43:
irb(main):001:0> a=[1,1,2,2,3,3,4]
=> [1, 1, 2, 2, 3, 3, 4]
irb(main):002:0> b=[5,5,4,4,3,3,2]
=> [5, 5, 4, 4, 3, 3, 2]
irb(main):003:0> c= a|b
=> [1, 2, 3, 4, 5]
irb(main):004:0> d=b|a
=> [5, 4, 3, 2, 1]
irb(main):005:0> e= a&b
=> [2, 3, 4]
irb(main):006:0> f = b &a
=> [4, 3, 2]

44:
irb(main):007:0> a=1..10
=> 1..10
irb(main):008:0> a.class
=> Range
irb(main):009:0> a.to_a
=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
irb(main):010:0> b=1...10
=> 1...10
irb(main):011:0> b.to_a
=> [1, 2, 3, 4, 5, 6, 7, 8, 9]
irb(main):012:0> b.include ? 10
SyntaxError: (irb):12: syntax error, unexpected $end, expecting ':'
	from /usr/bin/irb:12:in `<main>'
irb(main):013:0> b.include? 10
=> false
irb(main):014:0> b.include? 8
=> true
irb(main):015:0> b.step(2) {|x| print "#{x}"}
13579=> 1...10
irb(main):016:0> 1..3.to_a
NoMethodError: undefined method `to_a' for 3:Fixnum
	from (irb):16
	from /usr/bin/irb:12:in `<main>'
(ERROR)

45:
irb(main):017:0> r=0...100
=> 0...100
irb(main):018:0> r.member?50
=> true
irb(main):019:0> r.include?99.9
=> true
irb(main):020:0> r.member?99.9
=> true


46:
irb(main):021:0> true.class
=> TrueClass
irb(main):022:0> false.class
=> FalseClass
irb(main):023:0> puts "hello" if 0
hello
=> nil
irb(main):024:0> puts "hello" if nil
=> nil
irb(main):025:0> puts "hello" if ""
(irb):25: warning: string literal in condition
hello
=> nil

47:
irb(main):027:0> x= :sym
=> :sym
irb(main):028:0> x.class
=> Symbol
irb(main):029:0> x == 'sym'
=> false
irb(main):030:0> x == :sym
=> true
irb(main):033:0> z = :'a long symbol'
=> :"a long symbol"
irb(main):034:0> x.class
=> Symbol
irb(main):035:0> x == 'sym'.to_sym
=> true
irb(main):036:0> x.to_s == 'sym'
=> true

48:
irb(main):037:0> s="Ruby"
=> "Ruby"
irb(main):038:0> t=s
=> "Ruby"
irb(main):040:0> t[-1]=""
=> ""
irb(main):041:0> t="Java"
=> "Java"
irb(main):042:0> print s, t
RubJava=> nil

49:
irb(main):043:0> "%d %s" % [3, "rubies"]
=> "3 rubies"

50:
irb(main):044:0> x,y = 4,5
=> [4, 5]
irb(main):045:0> z=x> y ? x : y
=> 5
irb(main):046:0> x,y,z =[1,2,3]
=> [1, 2, 3]

51:
irb(main):001:0> x = { :a => 1, :b => 2 }
=> {:a=>1, :b=>2}
irb(main):002:0> 
irb(main):003:0* 
irb(main):003:0> x.keys
=> [:a, :b]
irb(main):004:0> x.values
=> [1, 2]
irb(main):005:0> x[:c] = 3
=> 3
irb(main):006:0> x.delete('a')
=> nil
irb(main):007:0> x
=> {:a=>1, :b=>2, :c=>3}
irb(main):008:0> x.delete(:a)
=> 1
irb(main):009:0> x
=> {:b=>2, :c=>3}
irb(main):012:0> x={:a => 1, :b => 2, :c => 4}
=> {:a=>1, :b=>2, :c=>4}
irb(main):013:0> x.delete_if {|k,v| v % 2 == 0}
=> {:a=>1}
irb(main):014:0> x
=> {:a=>1}



52:El yield invoca bloques en el caso de yield[4,5] estaria llamando al bloque
previamente definido y pasandole como parámetros 4 y 5. 


53:
irb(main):016:0> counts = Hash.new(0)
=> {}
Al hacer esto se crea un objeto de la clase hash, de la otra manera solo se 
rellena un array.


54:irb(main):009:0> 'hello world, hello LPP'.scan/\w+/
irb(main):010:0/ 


55:
irb(main):005:0> c = {:a => 3, :b => 2, :c => 1}
=> {:a=>3, :b=>2, :c=>1}
irb(main):008:0> c.keys.sort.each { |k| puts c[k] }
3
2
1
=> [:a, :b, :c]
